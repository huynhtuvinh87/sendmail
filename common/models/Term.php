<?php

namespace common\models;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "categories".
 *
 * @property integer $id
 * @property integer $parent_id
 * @property integer $order
 * @property integer $status
 */
class Term extends \yii\db\ActiveRecord {

    const PUBLIC_ACTIVE = 1;
    const PUBLIC_NOACTIVE = 0;

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return 'term';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
                [['title', 'type'], 'string', 'max' => 255],
                [['parent_id', 'status'], 'integer'],
                ['status', 'default', 'value' => self::PUBLIC_ACTIVE]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => 'ID',
            'title' => Yii::t('app', 'Title'),
            'slug' => 'Slug',
            'parent_id' => Yii::t('app', 'Parent'),
            'description' => Yii::t('app', 'Description'),
            'status' => Yii::t('app', 'Status'),
        ];
    }

    public static function find() {
        return new query\TermQuery(get_called_class());
    }

    public function behaviors() {
        return array_merge(parent::behaviors(), [
            'slugBehavior' => [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title'
            ],
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
        ]);
    }

    public function metaKeys() {
        return [];
    }

    public function afterFind() {
        parent::afterFind(); // TODO: Change the autogenerated stub
        // load meta
        foreach ($this->termMetas as $termMeta) {
            if (in_array($termMeta->meta_key, $this->metaKeys())) {
                $this->{$termMeta->meta_key} = $termMeta->meta_value;
            }
        }
    }

    public function afterSave($insert, $changedAttributes) {
        parent::afterSave($insert, $changedAttributes);
        // save meta
        TermMeta::deleteAll(['term_id' => $this->id]);
        foreach ($this->metaKeys() as $metaKey) {
            $termMeta = new TermMeta();
            $termMeta->term_id = $this->id;
            $termMeta->meta_key = $metaKey;
            $termMeta->meta_value = (string) $this->$metaKey;
            $termMeta->save();
        }
    }

    public function getCategories(&$data = [], $parent = NULL) {
        $category = Category::find()->where(['parent_id' => $parent])->andWhere(['NOT IN', 'id', (!$this->isNewRecord) ? $this->id : 0])->all();
        foreach ($category as $key => $value) {
            $data[$value->id] = $this->getIndent($value->indent) . $value->title;
            unset($category[$key]);
            $this->getCategories($data, $value->id);
        }
        return $data;
    }

    public function getIndent($int) {
        if ($int > 0) {
            for ($index = 1; $index <= $int; $index++) {
                $data[] = '-';
            }
            return implode('', $data) . ' ';
        } else
            return '';
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTermMetas() {
        return $this->hasMany(TermMeta::className(), ['term_id' => 'id']);
    }

    public function getPermanentLink() {
        return \Yii::$app->urlManager->createAbsoluteUrl(['category/' . $this->slug]);
    }

    public function getCount() {
        return Relationship::find()->where(['term_id' => $this->id])->count();
    }

    public function getPosts() {
        return $this->hasMany(Relationship::className(), ['term_id' => 'id'])->orderBy(['updated_at' => SORT_DESC])->limit(3);
    }

    public function getParents() {
        return $this->hasMany(self::className(), ['parent_id' => 'id']);
    }

}
