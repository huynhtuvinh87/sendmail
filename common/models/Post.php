<?php

namespace common\models;

use yii\db\ActiveRecord;
use common\models\PostMeta;

/**
 * This is the model class for table "post".
 *
 * @property integer $id

 */
class Post extends \yii\db\ActiveRecord {

    /**
     * @inheritdoc
     */
    const PUBLIC_ACTIVE = 1;
    const PUBLIC_NOACTIVE = 0;
    const TYPE_PRODUCT = 'product';
    const TYPE_PAGE = 'page';
    const TYPE_SLIDE = 'slide';

    public static function tableName() {
        return 'post';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
                [['title', 'slug', 'content', 'image'], 'string'],
                [['status', 'parent_id'], 'integer'],
                ['status', 'default', 'value' => self::PUBLIC_ACTIVE]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'category_id' => 'Danh mục',
            'title' => 'Tiêu đề',
            'content' => 'Nội dung',
            'author' => 'Người đăng',
            'status' => 'Trạng thái',
            'created_at' => 'Ngày đăng',
        ];
    }

    public function behaviors() {
        return array_merge(parent::behaviors(), [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
            'slugBehavior' => [
                'class' => \yii\behaviors\SluggableBehavior::className(),
                'attribute' => 'title'
            ],
        ]);
    }

    public static function find() {
        return new query\PostQuery(get_called_class());
    }

    public function afterDelete() {
        parent::afterDelete();
        Comment::deleteAll(['post_id' => $this->id]);
    }

    public function metaKeys() {
        return [];
    }

    public function afterFind() {
        parent::afterFind(); // TODO: Change the autogenerated stub
        // load meta
        foreach ($this->postMetas as $meta) {
            if (in_array($meta->meta_key, $this->metaKeys())) {
                $this->{$meta->meta_key} = $meta->meta_value;
            }
        }
    }

    public function afterSave($insert, $changedAttributes) {
        parent::afterSave($insert, $changedAttributes);
        // save meta
        PostMeta::deleteAll(['post_id' => $this->id]);
        foreach ($this->metaKeys() as $metaKey) {
            $postMeta = new PostMeta();
            $postMeta->post_id = $this->id;
            $postMeta->meta_key = $metaKey;
            $postMeta->meta_value = $this->$metaKey;
            $postMeta->save();
        }
        Relationship::deleteAll(['post_id' => $this->id]);
        if (!empty($this->category)) {
            foreach ($this->category as $value) {
                $relationship = new Relationship();
                $relationship->term_id = $value;
                $relationship->post_id = $this->id;
                $relationship->save();
            }
        }
        if (!empty($this->zodiac)) {
            foreach ($this->zodiac as $value) {
                $relationship = new Relationship();
                $relationship->term_id = $value;
                $relationship->post_id = $this->id;
                $relationship->save();
            }
        }
        if (!empty($this->age)) {
            foreach ($this->age as $value) {
                $relationship = new Relationship();
                $relationship->term_id = $value;
                $relationship->post_id = $this->id;
                $relationship->save();
            }
        }
        if (!empty($this->tag)) {
            foreach (explode(',', $this->tag) as $value) {
                $relationship = new Relationship();
                $relationship->term_id = $value;
                $relationship->post_id = $this->id;
                $relationship->save();
            }
        }
    }

    public function getUser() {
        return $this->hasOne(User::className(), ['id' => 'author']);
    }

    public function getObjects() {
        $model = Relationship::find()->where(['post_id' => $this->id])->all();
        $data = [];
        if (!empty($model)) {
            foreach ($model as $value) {
                $data[] = $value->term_id;
            }
        }
        return Term::find()->where(['IN', 'id', $data])->all();
    }

    public function getPostStatus() {
        return [
            self::PUBLIC_ACTIVE => \Yii::t('app', 'Public'),
            self::PUBLIC_NOACTIVE => \Yii::t('app', 'Private'),
        ];
    }

    public function getIndent($int) {
        if ($int > 0) {
            for ($index = 1; $index <= $int; $index++) {
                $data[] = '—';
            }
            return implode('', $data) . ' ';
        } else
            return '';
    }

    public function getChecked() {
        return [
            self::PUBLIC_NOACTIVE => '',
            self::PUBLIC_ACTIVE => 'checked',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostMetas() {
        return $this->hasMany(PostMeta::className(), ['post_id' => 'id']);
    }

    public function getExcerpt() {
        $str = $this->content;
        $str = strip_tags($str, '');
        if (strlen($str) < 130)
            return $str;
        else {
            $str = strip_tags($str);
            $str = substr($str, 0, 130);
            $end = strrpos($str, ' ');
            $str = substr($str, 0, $end) . ' ...';
            return $str;
        }
    }

}
